// game_Main.h //                          Author: Logan "Burn" Jones
////////////////                                      Date: 3/28/2002
//
/////////////////////////////////////////////////////////////////////
#ifndef _GAME_MAIN_H_
#define _GAME_MAIN_H_
/////////////////////////////////////////////////////////////////////


#include "game_Settings.h"
#include "ta_TDF.h"

////////////////////////////// game_Main //////////////////////////////
//
class game_Main
{
	typedef vector< class game_Player* >		PlayerList_t;

	typedef void (CALLBACK* LPStreamMessageHandler)(game_Main&);

/////////////////////////////////////////////////
// INTERFACE
public:

	// Scans and loads side data from gamedata/sides/*.tdf
	bool LoadSideData( const char* strSetRestrictions );
	void ClearSideData(){SideData.clear();}

	// Retrieve some side data
	SideData_t* GetSide( const char* strSide );

	// Creates a new game session
	BOOL Load();

	// Renders a load screen that displays the current load progress
	void RenderLoadScreen();

	// Called every frame to do the games stuff
	void OnFrame();

	// Renders the game scene
	void Render();

	// Destroys any active game session and its associated resources
	void Destroy();

	bool SetPlayerCount( DWORD dwCount );
	bool SetPlayer( DWORD dwIndex, PlayerTypes_t Type, LPCTSTR strSide, DWORD dwColor, float fMaxMetal, float fMaxEnergy, UINT32 uiNetID=~0 );


/////////////////////////////////////////////////
//{{AFX Net Messages (Generated by AsmNetMsg.exe. DO NOT EDIT)
public: // Notifications sent to the client
	void NotifySpawnCompleteUnit( const unit_Type* pType, const std_Point& ptWhere, UINT8 iPlayer );
protected: // Net message Handlers
	void OnNotifySpawnCompleteUnit( const unit_Type* pType, const std_Point& ptWhere, UINT8 iPlayer );
private:
	static void CALLBACK CallRequestStop( game_Main& Game );
	static void CALLBACK CallRequestMoveTo( game_Main& Game );
	static void CALLBACK CallRequestBuild( game_Main& Game );
	static void CALLBACK CallRequestActivate( game_Main& Game );
	static void CALLBACK CallRequestAttack( game_Main& Game );
	static void CALLBACK CallRequestUnit( game_Main& Game );
	static void CALLBACK CallNotifySpawnCompleteUnit( game_Main& Game );
	static void CALLBACK CallNotifyPrepareToBuild( game_Main& Game );
	static void CALLBACK CallNotifySpawnNewUnit( game_Main& Game );
//}}AFX Net Messages


/////////////////////////////////////////////////
// Externally available data members
public:

	// Current settings for the game
	game_Settings		Settings;

	// The current tick of the game
	DWORD				Tick;

	// Flag indicating if this game session is acting as a game server
	bool				IsGameServer;

	// Update time
	std_Time_t			m_UpdateTimeElapsed;
	const std_Time_t	m_UpdateTime;

	std_Time_t			m_InterfaceTimeElapsed;
	const std_Time_t	m_InterfaceTime;

	DWORD				m_FrameCount;
	std_Time_t			m_FrameTime;
	char				m_FramesPerSecond[64];

	DWORD				m_EconomyTick;

	physics_System		ColliderSystem;
	scene_System		ScenerySystem;

	game_Terrain		Terrain;
	weapon_Factory		Weapons;
	feature_Factory		Features;
	unit_Factory		Units;

	// Pointer to the in game interface
	game_UserInterface	Interface;

	// Data for all valid player sides
	SideList_t			SideData;

	PlayerList_t		Players;


/////////////////////////////////////////////////
// Internal data members
protected:

	LPStreamMessageHandler	m_NetMessageHandlers[ NET_MESSAGE_COUNT ];


/////////////////////////////////////////////////
// Utility methods
protected:

	// Assign each m_NetMessageHandlers[*] to its corresponding Call* function
	void AssignNetMessageHandlers();

	// Proccess any data available in the net recv buffer
	void ProccessNetMessages();

	// Handle a net system event (connection lost, etc)
	void HandleNetSystemMessage();

	// Hanle a messag that is not in the defined game_NetMessages_t range
	void HandleUndefinedNetMessage( UINT8 uiMsg );

	// If loading, handle a load specific message (client ready, stc)
	void LoadMessage( UINT8 uiMsg, bool bSysMsg );

	static void WINAPI UpdatePlayer( game_Player* pPlayer );
	static void WINAPI UpdatePlayerEconomy( game_Player* pPlayer );


/////////////////////////////////////////////////
// Default Constructor/Deconstructor
public:
	game_Main();
	virtual ~game_Main();
/////////////////////////////////////////////////

}; // End class - game_Main
/////////////////////////////////////////////////////////////////////


// Include inline implementaions here for a NON-debug build
#ifndef _DEBUG
 #include "game_Main.inl"
#endif // !defined( _DEBUG )


/////////////////////////////////////////////////////////////////////
#endif // !defined(_GAME_MAIN_H_)
