// unit_Object.h //                                \author Logan Jones
//////////////////                                   \date 12/29/2001
/// \file
/// \brief ...
/////////////////////////////////////////////////////////////////////
#ifndef _UNIT_OBJECT_H_
#define _UNIT_OBJECT_H_
/////////////////////////////////////////////////////////////////////

#include "unit_Task.h"
class igui_BuildOrders;

//////////////////////////// unit_Object ////////////////////////////
//
class unit_Object:
	public scene_Object,	// A unit object is part of a scene
	public physics_Object,	// A unit object has a physical presence
	public unit_Interface	// A unit object has a defined player interface
{
	friend class unit_Factory;
	friend class script_Machine;

/////////////////////////////////////////////////
// Type declarations
public:

	typedef void*	HPath;

	enum Tasks_t;
	struct Order_t;
	typedef vector< std_Vector2 >		Waypoints_t;
	typedef list< Order_t >				Orders_t;


/////////////////////////////////////////////////
// INTERFACE
public:

	BOOL Create( const std_Point& ptPosition, const struct unit_Type* pUnitType, class game_Player* pPlayer );

	void Update();
	void Animate();
	void Render( std_Vector2 vOffset ) const;
	void Render();

	void SetPath();
	void ComputeMotion();

	void DoJobStep( unit_Job* pJob, bool bStep );

	INLINE void StartAnimation();

	// Apply an amount of resources to a unit that is being built
	// Returns true if the unit is fully built
	bool ApplyResources( float fAmount );

	bool IsSelected() const {return m_bSelected;}
	bool IsStructure() const {return m_pUnitType->Behaviour==unit_Type::Structure;}
	bool Active() const {return m_Activation>0;}

	void SetUnitValue( const long& lUnitValueID, long lDesiredValue );
	const long GetUnitValue( const long lUnitValueID ) const;

	igui_BuildOrders*& BuildOrders() {return m_BuildOrders;}

	float AbsoluteHealth() const;

	// Return the values of the unit's current economic activity
	void EconomicActivity( float& fMetalProduction, float& fMetalConsumtion, float& fEnergyProduction, float& fEnergyConsumtion ) const;


/////////////////////////////////////////////////
// Various events
public:

	// Unit has been created. 
	virtual void OnCreate() = 0;

	// Unit has been completed (ie finished being built)
	virtual void OnComplete();

	// Unit has been activated/deactivated
	virtual void OnActivate();
	virtual void OnDeactivate();

	// Unit is in build stance (usually triggered by a 'set INBUILDSTANCE to 1' in the script)
	virtual void ReadyToWork();

	// A Job has completed
	virtual void JobComplete( unit_Job* pJob );

	// The 'yard' is now clear
	virtual void YardClear();


/////////////////////////////////////////////////
// Interface events - Client side
public:

	// Unit was selected in the igui. Show a selection rect and play
	// a sound or something
	virtual void OnSelect( bool bSelected, bool bSingle );

	// Button on build menu was pressed, selecting a unit type;
	// Let the derivations handle the selection
	virtual void OnNewBuildOrder();

	void PathFinished( Order_t* pOrder );


/////////////////////////////////////////////////
// Inherited physics_Object methods
protected:

	// Do a frame of movement and return the validity of the object
	bool DoMovement();

	// A possible collision was detected by the system.
	// Do a more detailed check and return whether a collsion occured
//	bool DetailedStaticCollision( physics_Object* pStatic );
//	bool DetailedDynamicCollision( physics_Object* pObject );

	// Handle a collision event. Returns whether the object is still valid mover
//	bool OnCollision( physics_Object* pCollidee );


/////////////////////////////////////////////////
//{{AFX Net Messages (Generated by AsmNetMsg.exe. DO NOT EDIT)
protected: // Net Message Handlers
	void OnRequestStop();
	void OnRequestMoveTo( const std_Point& ptWhere, bool bEnqueue );
	void OnRequestBuild( const unit_Type* pType, const std_Point& ptWhere, bool bEnqueue );
	void OnRequestActivate( bool bActivate );
	void OnRequestAttack( const std_Point& ptWhere, bool bEnqueue );
	void OnRequestUnit( const unit_Type* pType );
	void OnNotifyPrepareToBuild( const unit_Type* pType, const std_Point& ptWhere );
	void OnNotifySpawnNewUnit( const unit_Type* pType, const std_Point& ptWhere );
//}}AFX Net Messages


/////////////////////////////////////////////////
// Operations

//	virtual HPath FindPath( const std_Point& ptFrom, const std_Point& ptTo, int iProximity=0 );


/////////////////////////////////////////////////
// Commands
protected:

//	void Move( float fHowFast );
//	void Turn( std_Vector2 vToWhere );
//	void StopMoving();

	void Activate( bool bRunScript=true );
	void Deactivate(bool bRunScript=true);


/////////////////////////////////////////////////
// Type definitions
protected:

	typedef list<unit_Task>		TaskList_t;


/////////////////////////////////////////////////
// Data members
public:

	// Owning manager of this unit
	class unit_Factory&			m_Manager;

	// The unit's type
	const unit_Type*			m_pUnitType;

	// Player that owns this unit
	game_Player*				m_pPlayer;

	// Instance of m_pUnitType->Model
	gfx_ModelInstance*			m_Model;

	// Script proccess assocciated with this unit
	script_Proccess*			m_Script;

	// Movement information
	std_Vector2					m_Velocity;
	std_Vector2					m_Direction;
	std_Vector3					m_Orientation;
	//unit_MoveInfo				m_MoveInfo;
	float						m_Elevation;

	unit_Orders					m_Orders;
	igui_BuildOrders*			m_BuildOrders;

	DWORD						m_Health;

	// Menu index for the last menu used by this unit ( 0 = Orders; 1,2,3,... Build )
	DWORD						m_LastMenu;
	DWORD						m_LastBuildPage;

	// Misc order states
	BYTE						m_FireOrder;
	BYTE						m_MoveOrder;
	BYTE						m_Activation;
	BYTE						m_Cloaked;

	// Current selection state
	bool						m_bSelected;

	// True if the unit is ready to build something (ie. animation has already played)
	long						m_ReadyToBuild;

	float						m_BuildPercentLeft;

	// If non-NULL, this is the unit's current finite job (build,repair,reclaim,etc)
	unit_Job*					m_PrimaryJob;

	// If non-NULL, this is the unit's resource production job and is usually valid until the unit's demise
	unit_Job*					m_ProductionJob;

	// If non-NULL, this is the project that is working on this unit object
	unit_Project*				m_AttachedProject;


/////////////////////////////////////////////////
// Type definitions
public:



/////////////////////////////////////////////////
// Utility
protected:

	std_Vector2 Steering();

	virtual void Locomotion( const std_Vector2& vSteering ){}

	INLINE const std_Point& Waypoint() const {return m_Orders.Front().Waypoint;}


/////////////////////////////////////////////////
// Default Constructor/Deconstructor
public:
	unit_Object( unit_Factory& Manager );
	virtual ~unit_Object();
/////////////////////////////////////////////////

}; // End class - unit_Object
/////////////////////////////////////////////////////////////////////


// Include inline implementaions here for a NON-debug build
#ifndef _DEBUG
 #include "unit_Object.inl"
#endif // !defined( _DEBUG )


/////////////////////////////////////////////////////////////////////
#endif // !defined(_UNIT_OBJECT_H_)
